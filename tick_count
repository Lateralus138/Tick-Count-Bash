#!/bin/bash
complete -W "-- - -r -s -t -d -h --reset --start --stop --diff --help" tick_count
function tick_count(){
        which bc > /dev/null 2>&1 || return 1
	local tick=$(date +%s.%N)
	if [[ $# -gt 0 ]]; then
		case "${@^^}" in
			-R|--RESET)	unset start_tick stop_tick
                                        return 0;;
			-S|--START)     unset start_tick stop_tick
                                        start_tick="${tick}"
                                        return 0;;
			-T|--STOP)      stop_tick="${tick}"
                                        return 0;;
                        -D|--DIFF)      [[ -n "${start_tick}" &&
                                        -n "${stop_tick}" ]] &&
                                        bc <<< "${stop_tick} - \
                                                ${start_tick}" ||
                                        return 3
                                        return 0;;
                        -H|--HELP)      cat << EOF
 
 Usage: tick_count [OPTION]...
 Start or stop a timer or get the current tick count.
 Creates global variables \$start_tick and \$stop_tick.
 This is dependent on 'bc'.

 Options:
        -r, --reset     Reset global variables
        -s, --start     Set \$start_tick to current tick
        -t, --stop      Set \$stop_tick to current tick
        -d, --diff      Get difference between \$stop_tick
                        and \$start_tick      
        -h, --help      This help message & return

 Example: Benchmark listing files recursively
        -       tick_count -s   # start count
                find . -type f  # run command
                tick_count -t   # stop count
                tick_count -d   # echo difference

 Example: Get current tick count
        - tick_count

 Error Levels:
        1               'bc' was not found
        2               Incorrect parameters passed
        3               Both variables are not set

EOF
                                        return 0;; 
		esac
		return 2
	fi
	echo "${tick}"
}
